CS 6381: Distributed Systems Principles – Programming Assignment 1
Centralized Discovery, Multi-Dissemination Strategy Publish-Subscribe
Spring 2025


1. Overview
This project implements a publish–subscribe middleware built on top of ZeroMQ that supports two system-wide dissemination strategies:

Direct Dissemination: Publishers send messages directly to subscribers once matching has been performed.
ViaBroker Dissemination: Publishers send messages to a centralized Broker, which then forwards (disseminates) the messages to interested subscribers.

A centralized Discovery Service is used for all entities (publishers, subscribers, and the broker) to register themselves and for clients to lookup the location (IP address and port) of the entities they need to connect to. The middleware layer hides the direct use of ZeroMQ from the application code; applications interact only with the provided API.


2. Project Architecture
The system is designed with a hybrid Client-Server / Publish–Subscribe architecture:

Components:
Discovery Service
DiscoveryAppln.py: Application logic for handling registrations, is-ready checks, and lookups.
DiscoveryMW.py: Middleware with ZeroMQ REP sockets to manage communication.
discovery.proto: Protocol Buffers definitions for serializing Discovery messages.
Publisher
PublisherAppln.py: Publishes messages on specific topics.
PublisherMW.py: Middleware layer with PUB sockets (for dissemination) and REQ sockets (for discovery).
Subscriber
SubscriberAppln.py: Subscribes to specific topics and receives messages.
SubscriberMW.py: Middleware with SUB sockets (to receive messages) and REQ sockets (for discovery).
Broker (Used in ViaBroker mode)
BrokerAppln.py: Application logic for receiving messages from publishers and forwarding them to subscribers.
BrokerMW.py: Middleware for Broker functionality with PUB, SUB, and REQ sockets.


3. File Structure

.
├── CS6381_MW/                     # Middleware core components
│   ├── __init__.py                # Initialization module
│   ├── BrokerMW.py                # Middleware logic for the Broker
│   ├── Common.py                  # Common utilities or shared methods (not detailed)
│   ├── discovery_pb2.py           # Protobuf-generated serialization logic
│   ├── discovery.proto            # Protobuf definition for Discovery Service messages
│   ├── DiscoveryMW.py             # Middleware logic for the Discovery Service
│   ├── PublisherMW.py             # Middleware logic for Publishers
│   ├── SubscriberMW.py            # Middleware logic for Subscribers
│   └── topic.proto                # Protobuf definition for topic-related messages
│
├── EXPERIMENTS/                   # Scripts and files for testing and experiments
│   ├── local_5P_4S.sh             # Script for local testing (5 Publishers, 4 Subscribers)
│   ├── Local_README               # Instructions for running locally
│   ├── mininet_1S_10H_5P_4S.sh    # Script for running in a Mininet environment
│   └── Mininet_README             # Instructions for testing in Mininet
│
├── config.ini                     # Configuration file for Discovery and Dissemination strategies
├── BrokerAppln.py                 # Application-layer logic for the Broker
├── DiscoveryAppln.py              # Application-layer logic for the Discovery Service
├── KeyChanges.docx                # Change log or modification document
├── PublisherAppln.py              # Application-layer logic for Publishers
├── README                         # Project documentation
├── SubscriberAppln.py             # Application-layer logic for Subscribers
├── TESTING/                       # Files or data related to testing
└── topic_selector.py              # Helper tool for topic selection


4. Environment Setup and Dependencies
Prerequisites
Python 3.6+

Install the required Python libraries:
pip install pyzmq protobuf

For Mininet (if testing on virtual topologies):
sudo apt-get install mininet


5. Running the System
5.1 Local Testing
Start the Discovery Service:
python3 DiscoveryAppln.py -P 5 -S 4 -c config.ini

Start Publishers:
python3 PublisherAppln.py -n pub1 -T 5 -p 5570 -c config.ini &
python3 PublisherAppln.py -n pub2 -T 5 -p 5571 -c config.ini &
...

Start Subscribers:
python3 SubscriberAppln.py -n sub1 -T 5 -c config.ini &
python3 SubscriberAppln.py -n sub2 -T 5 -c config.ini &
...

If using ViaBroker mode, start the Broker:
python3 BrokerAppln.py -n broker -p 5560 -c config.ini

Alternatively, use the provided script:
./local_5P_4S.sh

5.2 Mininet Testing
Launch a Mininet topology:
sudo mn --topo=single,10 --mac --switch ovsk --controller remote

Use xterm for each host to start the Discovery Service, Publishers, Subscribers, and Broker (similar to local testing).

Alternatively, use the provided Mininet script:
./mininet_1S_10H_5P_4S.sh

6. Performance Testing
Metrics:
Latency: Measure time from publication to receipt by subscribers.
Throughput: Messages per second under varying loads.
Scalability: Impact of increasing the number of publishers/subscribers.

Methodology:
Modify message size, frequency, and number of participants.
For Mininet, test with network constraints (e.g., bandwidth, latency, packet loss).
Log results to JSON/CSV files for analysis.

Authors
Haowen Yao
Xindong Zheng
Yan Zhang

License: Educational use for CS 6381, Spring 2025. All rights reserved.