# CS 6381: Distributed Systems Principles – Programming Assignment 2

**Spring 2025**

---

### 1. Overview
This project implements a publish–subscribe middleware built on top of ZeroMQ that supports two dissemination strategies:

- **Direct Dissemination:**  
  Publishers send messages directly to subscribers (after topic matching).

- **ViaBroker Dissemination:**  
  Publishers send messages to a centralized Broker, which forwards (disseminates) the messages to interested subscribers.

A centralized Discovery Service is used for all entities (publishers, subscribers, and the broker) to register themselves and allow clients to look up the location (IP address and port) of the entities they need to connect to. The middleware layer hides the details of ZeroMQ; applications interact only with the provided API.

---

### 2. Project Architecture
The system uses a hybrid Client–Server / Publish–Subscribe design:

- **Discovery Service**  
  - *DiscoveryAppln.py*: Application logic for handling registrations, is-ready checks, and lookups.  
  - *DiscoveryMW.py*: Middleware using ZeroMQ REP sockets to process requests.  
  - *discovery.proto*: Protobuf definitions for Discovery messages.

- **Publishers**  
  - *PublisherAppln.py*: Application logic for publishing messages on specific topics.  
  - *PublisherMW.py*: Middleware layer using PUB sockets (for dissemination) and REQ sockets (to interact with the Discovery Service).

- **Subscribers**  
  - *SubscriberAppln.py*: Application logic for subscribing to topics and receiving messages.  
  - *SubscriberMW.py*: Middleware layer using SUB sockets (to receive messages) and REQ sockets (for discovery).

- **Broker** (used in the ViaBroker dissemination strategy)  
  - *BrokerAppln.py*: Application logic，the Broker acts as an intermediary—receiving messages from publishers and forwarding them to subscribers.  
  - *BrokerMW.py*: Middleware for the Broker, which uses a combination of PUB, SUB, and REQ sockets.

---

## File Structure

```plaintext
.
├── CS6381_MW/                     # Middleware core components
│   ├── __init__.py                # Initialization module
│   ├── BrokerMW.py                # Middleware logic for the Broker
│   ├── Common.py                  # Common utilities or shared methods
│   ├── discovery_pb2.py           # Protobuf-generated serialization logic
│   ├── discovery.proto            # Protobuf definition for Discovery Service messages
│   ├── DiscoveryMW.py             # Middleware logic for the Discovery Service
│   ├── PublisherMW.py             # Middleware logic for Publishers
│   ├── SubscriberMW.py            # Middleware logic for Subscribers
│   └── topic.proto                # Protobuf definition for topic-related messages
│
├── EXPERIMENTS/                   # Scripts and files for testing and experiments
│   ├── local_5P_4S.sh             # Script for local testing (5 Publishers, 4 Subscribers)
│   ├── Local_README               # Instructions for running locally
│   ├── mininet_1S_10H_5P_4S.sh    # Script for running in a Mininet environment
│   └── Mininet_README             # Instructions for testing in Mininet
│
├── config.ini                     # Configuration file for Discovery and Dissemination strategies
├── BrokerAppln.py                 # Application-layer logic for the Broker
├── DiscoveryAppln.py              # Application-layer logic for the Discovery Service
├── KeyChanges.docx                # Change log or modification document
├── PublisherAppln.py              # Application-layer logic for Publishers
├── README.md                      # Project documentation
├── SubscriberAppln.py             # Application-layer logic for Subscribers
├── TESTING/                       # Files or data related to testing
└── topic_selector.py              # Helper tool for topic selection

---

### 4. Environment Setup and Dependencies
**Prerequisites:**
- Python 3.6 or higher
- [ZeroMQ](http://zeromq.org/) & [pyzmq](https://pypi.org/project/pyzmq/)
- [Protobuf](https://developers.google.com/protocol-buffers)

---

## 5. Running the System
5.1 Direct Dissemination Mode (Multiple Publishers and Subscribers)
Recommended start-up order:

Start the Discovery Service:
python3 DiscoveryAppln.py -P 5 -S 4 -p 5555 -c config.ini -l 10

Start Publishers:
python3 PublisherAppln.py -n pub1 -a localhost -p 5577 -d localhost:5555 -T 3 -f 1 -i 100 -c config.ini -l 10
python3 PublisherAppln.py -n pub2 -a localhost -p 5578 -d localhost:5555 -T 3 -f 1 -i 100 -c config.ini -l 10
# (Launch as many publisher instances as desired.)

Start Subscribers:
python3 SubscriberAppln.py -n sub1 -a localhost -p 5560 -d localhost:5555 -T 3 -c config.ini -l 10 -t -f latency.json
python3 SubscriberAppln.py -n sub2 -a localhost -p 5561 -d localhost:5555 -T 3 -c config.ini -l 10 -t -f latency2.json
# (Launch as many subscriber instances as desired.)

#After applying zookeeper:
Start the Discovery Service:
python3 DiscoveryAppln.py -p 5555 -c config.ini -l 10

Start Publishers:
python3 PublisherAppln.py -n pub1 -a localhost -p 5577 -T 3 -f 1 -i 100 -c config.ini -l 10

Start Subscribers:
python3 SubscriberAppln.py -n sub1 -a localhost -p 5560 -T 3 -c config.ini -l 10 -t -f latency.json

5.2 ViaBroker Dissemination Mode
In this mode, the Broker serves as the intermediary. Recommended start-up order:

Start the Discovery Service:
python3 DiscoveryAppln.py -P 5 -S 4 -p 5555 -c config.ini -l 10

Start the Broker:
python3 BrokerAppln.py -n broker -a localhost -p 5570 -d localhost:5555 -T 3 -c config.ini -l 10

Start Publishers:
python3 PublisherAppln.py -n pub1 -a localhost -p 5577 -d localhost:5555 -T 3 -f 1 -i 100 -c config.ini -l 10
python3 PublisherAppln.py -n pub2 -a localhost -p 5578 -d localhost:5555 -T 3 -f 1 -i 100 -c config.ini -l 10

Start Subscribers:
python3 SubscriberAppln.py -n sub1 -a localhost -p 5560 -d localhost:5555 -T 3 -c config.ini -l 10 -t -f latency.json
python3 SubscriberAppln.py -n sub2 -a localhost -p 5561 -d localhost:5555 -T 3 -c config.ini -l 10 -t -f latency.json

#After applying zookeeper:
Start the Discovery Service:
python3 DiscoveryAppln.py -p 5555 -c config.ini -l 10

Start the Broker:
python3 BrokerAppln.py -n broker -a localhost -p 5570 -T 3 -c config.ini -l 10

Start Publishers:
python3 PublisherAppln.py -n pub1 -a localhost -p 5577 -T 3 -f 1 -i 100 -c config.ini -l 10

Start Subscribers:
python3 SubscriberAppln.py -n sub1 -a localhost -p 5560 -T 3 -c config.ini -l 10 -t -f latency.json
---

## 6. Latency Reuslts
Latency results is provided in the directory latency_results.
By comparing the latency files generated from the two assignments, it can be observed that the primary source of high latency comes from network communication time, 
which may occur during system startup. 
However, no significant delay caused by the deployment of the ZooKeeper service was observed. 
The vast majority of message latencies fall within 1-2ms, with occasional delays exceeding 10ms, which can be attributed to network fluctuations.

## 7. Demonstration Video
A demonstration video is provided with this project. The video shows:

Programming Assignment 1: https://youtu.be/rihmkwGVek8

Programming Assignment 2: https://youtu.be/9kSFTGLd9-c

Authors
Haowen Yao
Xindong Zheng
Yan Zhang
